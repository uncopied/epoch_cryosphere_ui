{"version":3,"sources":["utils/consts.ts","utils/enums.ts","utils/functions.ts","utils/styled-components.ts","App.tsx","services/ContractService.tsx","services/FirebaseService.tsx","services/TransactionService.tsx","reportWebVitals.ts","index.tsx","services/ChainService.tsx","services/WalletService.tsx"],"names":["Chain","Status","FirebaseFields","FirebaseCollections","NodeEnv","BRIDGE","ALGOD_HOST_MAIN","ALGOD_HOST_TEST","INDEXER_HOST_MAIN","INDEXER_HOST_TEST","ellipseAddress","address","width","slice","SButton","styled","button","img","div","INITIAL_STATE","connector","WalletService","firebaseService","FirebaseService","chainService","ChainService","contractService","ContractService","transactionService","TransactionService","connected","accounts","contracts","price","assetIndex","App","props","setupFirebase","a","state","setup","account","loadContracts","subscribeToWalletEvents","on","error","payload","window","location","reload","console","log","onConnect","params","onSessionUpdate","onDisconnect","setState","killSession","getDocuments","AssetSaleContracts","then","snapshot","forEach","contract","contractData","data","Seller","Active","IsMain","isMainNet","push","sellAsset","seller","generateAssetSaleContract","contractResult","result","addDocument","asset_index","contract_result","status","Pending","is_main","created_on","serverTimestamp","response","updateDocument","id","updated_on","buyAsset","buyer","createSession","currContract","getContractSig","contractSig","Price","AssetIndex","Complete","updated","remainingContracts","ContractResult","Uint8Array","Buffer","from","LogicSigAccount","this","connectWallet","handleBuy","length","className","onClick","disabled","alert","React","Component","asset","url","process","fetch","request","json","getAssetMetadataFromIpfs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","currentAccountData","initializeApp","getAnalytics","getDocument","currentAccount","exists","collectionName","firestore","getFirestore","ref","collection","addDoc","getDoc","docIndex","doc","updateDoc","deleteDocument","deleteDoc","getDocs","getContractForAsset","index","query","where","docs","getContractsForSeller","filter","algod","walletService","collabAddresses","sendAndConfirm","signedTxns","sendRawTransaction","do","sentTxns","algosdk","waitForConfirmation","txId","confirmedTxns","contractEncoded","getTransactionParams","suggestedParams","txn0","makePaymentTxnWithSuggestedParamsFromObject","to","amount","txn1","makeAssetTransferTxnWithSuggestedParamsFromObject","txn2","group","assignGroupID","sign","signLogicSigTransactionObject","blob","groupTxns","closeRemainderTo","collabAddress","txn","txn3","txn4","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","Production","algodHost","Algodv2","indexerHost","indexer","Indexer","WalletConnect","bridge","qrcodeModal","QRCodeModal","txns","txnsToSign","map","encodeUnsignedTransaction","toString","includes","signers","formatJsonRpcRequest","sendCustomRequest","element"],"mappings":"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","file":"static/js/main.41f4e5cc.chunk.js","sourcesContent":["export const BRIDGE = 'https://bridge.walletconnect.org';\nexport const ALGOD_HOST_MAIN = 'https://node.algoexplorerapi.io';\nexport const ALGOD_HOST_TEST = 'https://node.testnet.algoexplorerapi.io';\nexport const INDEXER_HOST_MAIN = 'https://algoindexer.algoexplorerapi.io/';\nexport const INDEXER_HOST_TEST =\n  'https://algoindexer.testnet.algoexplorerapi.io/';\nexport const IPFS = 'ipfs://';\nexport const IPFS_DOMAIN = 'https://ipfs.io/ipfs/';\n","export enum Chain {\n  MainNet = 'mainnet',\n  TestNet = 'testnet',\n}\n\nexport enum Status {\n  Pending = 'pending',\n  Active = 'active',\n  Complete = 'complete',\n}\n\nexport enum FirebaseFields {\n  Seller = 'seller',\n  AssetIndex = 'asset_index',\n  Price = 'price',\n  ContractResult = 'contract_result',\n  Status = 'status',\n  IsMain = 'is_main',\n  CreatedOn = 'created_on',\n  UpdatedOn = 'updated_on',\n}\n\nexport enum FirebaseCollections {\n  AssetSaleContracts = 'asset_sale_contracts',\n}\n\nexport enum NodeEnv {\n  Production = 'production',\n}\n","export function ellipseAddress(address: string, width = 6): string {\n  return `${address.slice(0, width)}...${address.slice(-width)}`;\n}\n\nexport function formatMoney(value: number): string {\n  return value.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n}\n","import styled from 'styled-components';\n\nexport const SButton = styled.button`\n  padding: 0.5rem 1rem;\n  color: black;\n  border-color: black;\n  background-color: white;\n  cursor: pointer;\n  &:hover&:!disabled {\n    opacity: 0.8;\n  }\n  &:disabled {\n    border-color: gray;\n    cursor: unset;\n  }\n`;\n\nexport const SImage = styled.img`\n  max-width: 100%;\n  border-radius: 0.5rem;\n  border-style: solid;\n  border-width: 0.05rem;\n`;\n\nexport const SAssetInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0 1rem 2rem 1rem;\n  overflow-wrap: break-word;\n`;\n\nexport const SIcon = styled.img`\n  height: 1rem;\n  margin-left: 0.2rem;\n`;\n","import WalletConnect from '@walletconnect/client';\nimport { IInternalEvent } from '@walletconnect/types';\nimport { LogicSigAccount } from 'algosdk';\nimport { serverTimestamp } from 'firebase/firestore';\nimport React from 'react';\nimport './App.css';\nimport ChainService from './services/ChainService';\nimport ContractService from './services/ContractService';\nimport FirebaseService from './services/FirebaseService';\nimport TransactionService from './services/TransactionService';\nimport WalletService from './services/WalletService';\nimport {\n  ellipseAddress,\n  FirebaseCollections,\n  FirebaseFields,\n  SButton,\n  Status,\n} from './utils';\n\ninterface AppProps {}\n\ninterface AppState {\n  connector: WalletConnect;\n  firebaseService: FirebaseService;\n  chainService: ChainService;\n  contractService: ContractService;\n  transactionService: TransactionService;\n  address: string;\n  connected: boolean;\n  accounts: string[];\n  contracts: any[];\n\n  price: number;\n  assetIndex: number;\n}\n\nconst INITIAL_STATE: AppState = {\n  connector: new WalletService().connector,\n  firebaseService: new FirebaseService(),\n  chainService: new ChainService(),\n  contractService: new ContractService(),\n  transactionService: new TransactionService(),\n  address: '',\n  connected: false,\n  accounts: [],\n  contracts: [],\n\n  price: -1,\n  assetIndex: 0,\n};\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    const { connected, accounts } = INITIAL_STATE.connector;\n    this.state = {\n      ...INITIAL_STATE,\n      connected,\n      accounts,\n      address: accounts[0],\n    };\n    this.subscribeToWalletEvents();\n    this.setupFirebase();\n    console.log('on mainnet:', this.state.chainService.isMainNet);\n  }\n\n  setupFirebase = async () => {\n    await this.state.firebaseService.setup({ account: this.state.address });\n    this.loadContracts();\n  };\n\n  subscribeToWalletEvents = async () => {\n    const connector = this.state.connector;\n    if (!connector) return;\n    connector.on('connect', (error: Error | null, payload: any) => {\n      window.location.reload();\n      console.log(`connector.on('connect')`);\n      if (error) throw error;\n      this.onConnect(payload);\n    });\n    connector.on(\n      'session_update',\n      async (error: Error | null, payload: any) => {\n        console.log(`connector.on('session_update')`);\n        if (error) throw error;\n        const accounts = payload.params[0].accounts;\n        this.onSessionUpdate(accounts);\n      }\n    );\n    connector.on('disconnect', (error: Error | null, payload: any) => {\n      console.log(`connector.on('disconnect')`);\n      if (error) throw error;\n      this.onDisconnect();\n    });\n    if (connector.connected) {\n      const { accounts } = connector;\n      this.setState({\n        connected: true,\n        accounts,\n        address: accounts[0],\n      });\n      this.onSessionUpdate(accounts);\n    }\n    this.setState({ connector });\n  };\n\n  onConnect = (payload: IInternalEvent) => {\n    const { accounts } = payload.params[0];\n    this.setState({\n      connected: true,\n      accounts,\n      address: accounts[0],\n    });\n  };\n\n  onSessionUpdate = (accounts: string[]) => {\n    this.setState({ accounts, address: accounts[0] });\n  };\n\n  onDisconnect = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  killSession = () => {\n    const { connector } = this.state;\n    if (connector) connector.killSession();\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  // asset management\n  loadContracts = async () => {\n    const contracts: any[] = [];\n    await this.state.firebaseService\n      .getDocuments(FirebaseCollections.AssetSaleContracts)\n      .then((snapshot) =>\n        snapshot.forEach((contract) => {\n          const contractData = contract.data();\n          if (\n            contractData[FirebaseFields.Seller] === this.state.address &&\n            contractData[FirebaseFields.Status] === Status.Active &&\n            contractData[FirebaseFields.IsMain] ===\n              this.state.chainService.isMainNet\n          ) {\n            contracts.push(contract.data());\n          }\n        })\n      );\n    this.setState({ contracts });\n  };\n\n  sellAsset = async (assetIndex: number, price: number): Promise<void> => {\n    const {\n      address: seller,\n      firebaseService,\n      chainService,\n      contractService,\n      transactionService,\n    } = this.state;\n\n    if (seller && price) {\n      try {\n        const contract = await contractService.generateAssetSaleContract(\n          seller,\n          assetIndex,\n          price\n        );\n        const contractResult = contract.result;\n        const response = await firebaseService.addDocument(\n          FirebaseCollections.AssetSaleContracts,\n          {\n            seller,\n            asset_index: assetIndex,\n            price,\n            contract_result: contractResult,\n            status: Status.Pending,\n            is_main: chainService.isMainNet,\n            created_on: serverTimestamp(),\n          }\n        );\n        // confirm transaction\n        await transactionService.sellAsset({\n          seller,\n          assetIndex,\n          contractResult,\n        });\n        // update status to active\n        firebaseService.updateDocument(\n          FirebaseCollections.AssetSaleContracts,\n          response.id,\n          {\n            status: Status.Active,\n            updated_on: serverTimestamp(),\n          }\n        );\n        // this.setState({ status: Status.Active, price });\n      } catch (error) {\n        throw error;\n      }\n    }\n  };\n\n  buyAsset = async (): Promise<void> => {\n    const {\n      connector,\n      address: buyer,\n      contracts,\n      transactionService,\n      firebaseService,\n    } = this.state;\n\n    if (!buyer) {\n      connector.createSession();\n      return;\n    }\n\n    const currContract = contracts[0];\n    const contractSig = await this.getContractSig(currContract);\n    const seller = currContract[FirebaseFields.Seller];\n    const price = currContract[FirebaseFields.Price];\n    const assetIndex = currContract[FirebaseFields.AssetIndex];\n\n    if (contractSig && seller && price) {\n      try {\n        // confirm transaction\n        await transactionService.buyAsset({\n          buyer,\n          seller,\n          assetIndex,\n          price,\n          contractSig,\n        });\n        firebaseService.updateDocument(\n          FirebaseCollections.AssetSaleContracts,\n          currContract.id,\n          {\n            status: Status.Complete,\n            updated: serverTimestamp(),\n            buyer,\n          }\n        );\n        const remainingContracts = contracts.slice(1);\n        this.setState({ contracts: remainingContracts });\n      } catch (error) {\n        throw error;\n      }\n    }\n  };\n\n  getContractSig = async (contractData: any): Promise<LogicSigAccount> => {\n    const contractResult = contractData[FirebaseFields.ContractResult];\n    const contract = new Uint8Array(Buffer.from(contractResult, 'base64'));\n    return new LogicSigAccount(contract);\n  };\n\n  render() {\n    const { connector, address, contracts } = this.state;\n    const connectWallet = async () => connector.createSession();\n    const handleBuy = async () => this.buyAsset();\n    const handleSell = async () => this.sellAsset(94453501, 100 * 1e16);\n    const seller = contracts?.length\n      ? contracts[0][FirebaseFields.Seller]\n      : null;\n\n    return (\n      <div className='vh-100 flex items-center justify-around'>\n        {address ? (\n          <div className='w-100 flex items-center justify-around'>\n            <div className='flex flex-column'>\n              <span className='pointer-fade f6' onClick={this.killSession}>\n                Disconnect\n              </span>\n              <span className='blue'>{ellipseAddress(address)}</span>\n            </div>\n            <SButton onClick={handleBuy} disabled={seller === address}>\n              Acquire NFT\n            </SButton>\n            <SButton\n              onClick={() => {\n                alert('Apologies transaction cancelled. Please try again');\n              }}\n              disabled={seller === address}\n            >\n              Test Pop Up\n            </SButton>\n            {/* <div className='mv3 flex flex-column items-center justify-between'>\n              <div className='flex mb2'>\n                <input\n                  className='pa2 ba br2 mr2'\n                  type='number'\n                  min='1'\n                  step='1'\n                  name='price'\n                  // onChange={this.onInputChange}\n                  required\n                  placeholder='Asset Index'\n                />\n                <input\n                  className='pa2 ba br2'\n                  type='number'\n                  min='1'\n                  step='1'\n                  name='price'\n                  // onChange={this.onInputChange}\n                  required\n                  placeholder='Price in Algo'\n                />\n              </div>\n              <SButton className='w-third pointer' onClick={handleSell}>\n                Put on Sale\n              </SButton>\n            </div> */}\n          </div>\n        ) : (\n          <SButton onClick={connectWallet}>Connect Wallet</SButton>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default class ContractService {\n  generateAssetSaleContract = async (\n    seller: string,\n    asset: number,\n    price: number\n  ): Promise<any> => {\n    try {\n      const url = `https://us-central1-${process.env.REACT_APP_FIREBASE_ID}.cloudfunctions.net/asset_sale_contract?seller=${seller}&asset=${asset}&price=${price}`;\n      const request = await fetch(url);\n      return await request.json();\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getAssetMetadataFromIpfs = async (url: string): Promise<any> => {\n    try {\n      return fetch(url).then((response) => response?.json());\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n","import { getAnalytics } from 'firebase/analytics';\nimport { initializeApp } from 'firebase/app';\nimport {\n  addDoc,\n  collection,\n  deleteDoc,\n  doc,\n  DocumentData,\n  DocumentSnapshot,\n  getDoc,\n  getDocs,\n  getFirestore,\n  query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  updateDoc,\n  where,\n} from 'firebase/firestore';\nimport { FirebaseCollections, FirebaseFields, Status } from '../utils';\nimport ChainService from './ChainService';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_ID + 'firebaseapp.com',\n  projectId: process.env.REACT_APP_FIREBASE_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_ID + 'appspot.com',\n  messagingSenderId: '389375659221',\n  appId: '1:389375659221:web:35bee8184ceae82f32a65c',\n};\n\nexport default class FirebaseService {\n  currentAccountData = {};\n  chainService = new ChainService();\n\n  setup = async ({ account }: any): Promise<void> => {\n    initializeApp(firebaseConfig);\n    getAnalytics();\n    if (account) {\n      const currentAccount = await this.getDocument('accounts', account);\n      this.currentAccountData = currentAccount.exists()\n        ? currentAccount.data()\n        : {};\n    } else {\n      this.currentAccountData = {};\n    }\n  };\n\n  addDocument = async (\n    collectionName: string,\n    data: any\n  ): Promise<DocumentSnapshot<any>> => {\n    const firestore = getFirestore();\n    const ref = collection(firestore, collectionName);\n    const response = await addDoc(ref, data);\n    return await getDoc(response);\n  };\n\n  getDocument = async (\n    collectionName: string,\n    docIndex: string\n  ): Promise<DocumentSnapshot<DocumentData>> => {\n    const firestore = getFirestore();\n    const ref = doc(firestore, collectionName, docIndex);\n    return await getDoc(ref);\n  };\n\n  updateDocument = async (\n    collectionName: string,\n    docIndex: string,\n    data: any\n  ): Promise<void> => {\n    const firestore = getFirestore();\n    const ref = doc(firestore, collectionName, docIndex);\n    await updateDoc(ref, data);\n  };\n\n  deleteDocument = async (\n    collectionName: string,\n    docIndex: string\n  ): Promise<void> => {\n    const firestore = getFirestore();\n    const ref = doc(firestore, collectionName, docIndex);\n    return await deleteDoc(ref);\n  };\n\n  getDocuments = async (\n    collectionName: string\n  ): Promise<QuerySnapshot<DocumentData>> => {\n    const firestore = getFirestore();\n    const ref = collection(firestore, collectionName);\n    return await getDocs(ref);\n  };\n\n  getContractForAsset = async (\n    index: number\n  ): Promise<QueryDocumentSnapshot<DocumentData> | null> => {\n    const firestore = getFirestore();\n    const ref = collection(firestore, FirebaseCollections.AssetSaleContracts);\n    const contracts = query(\n      ref,\n      where(FirebaseFields.AssetIndex, '==', index),\n      where(FirebaseFields.Status, '==', Status.Active)\n    );\n    const snapshot = await getDocs(contracts);\n    if (snapshot.docs.length > 0 && snapshot.docs[0].exists()) {\n      return snapshot.docs[0];\n    } else {\n      return null;\n    }\n  };\n\n  getContractsForSeller = async (\n    address: string\n  ): Promise<QueryDocumentSnapshot<DocumentData>[]> => {\n    const firestore = getFirestore();\n    const ref = collection(firestore, FirebaseCollections.AssetSaleContracts);\n    const filter = query(\n      ref,\n      where(FirebaseFields.Seller, '==', address),\n      where(FirebaseFields.Status, '==', Status.Active),\n      where(FirebaseFields.IsMain, '==', this.chainService.isMainNet)\n    );\n    const snapshot = await getDocs(filter);\n    return snapshot.docs;\n  };\n}\n","import algosdk, { LogicSigAccount, Transaction } from 'algosdk';\nimport ChainService from './ChainService';\nimport WalletService from './WalletService';\n\nexport default class TransactionService {\n  algod = new ChainService().algod;\n  walletService = new WalletService();\n\n  collabAddresses = (): string[] => [\n    process.env.REACT_APP_COLLAB_1_ADDRESS!,\n    process.env.REACT_APP_COLLAB_2_ADDRESS!,\n    process.env.REACT_APP_COLLAB_3_ADDRESS!,\n    process.env.REACT_APP_COLLAB_4_ADDRESS!,\n    process.env.REACT_APP_COLLAB_5_ADDRESS!,\n    process.env.REACT_APP_COLLAB_6_ADDRESS!,\n    process.env.REACT_APP_COLLAB_7_ADDRESS!,\n    process.env.REACT_APP_COLLAB_8_ADDRESS!,\n  ];\n\n  sendAndConfirm = async (\n    signedTxns: Uint8Array[]\n  ): Promise<Record<string, any>> => {\n    try {\n      const sentTxns = await this.algod.sendRawTransaction(signedTxns).do();\n      console.log('sentTxns', sentTxns);\n      const confirmedTxns = await algosdk.waitForConfirmation(\n        this.algod,\n        sentTxns.txId,\n        4\n      );\n      return confirmedTxns;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  sellAsset = async ({\n    seller,\n    assetIndex,\n    contractResult,\n  }: any): Promise<Record<string, any>> => {\n    try {\n      const contractEncoded = new Uint8Array(\n        Buffer.from(contractResult, 'base64')\n      );\n      const contractSig = new LogicSigAccount(contractEncoded);\n      const suggestedParams = await this.algod.getTransactionParams().do();\n      // fund escrow\n      const txn0: Transaction =\n        algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: seller,\n          to: contractSig.address(),\n          amount: 0.5 * 1e6,\n          suggestedParams,\n        });\n      // opt in escrow\n      const txn1: Transaction =\n        algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: contractSig.address(),\n          to: contractSig.address(),\n          amount: 0,\n          assetIndex,\n          suggestedParams,\n        });\n      // transfer asset to escrow\n      const txn2: Transaction =\n        algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: seller,\n          to: contractSig.address(),\n          assetIndex,\n          amount: 1,\n          suggestedParams,\n        });\n\n      const group = algosdk.assignGroupID([txn0, txn1, txn2]);\n      const signedTxns = await this.walletService.sign(group);\n      signedTxns[1] = algosdk.signLogicSigTransactionObject(\n        group[1],\n        contractSig\n      ).blob;\n\n      const confirmedTxns = await this.sendAndConfirm(signedTxns);\n      return confirmedTxns;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  buyAsset = async ({\n    buyer,\n    seller,\n    assetIndex,\n    price,\n    contractSig,\n  }: any): Promise<Record<string, any>> => {\n    try {\n      const suggestedParams = await this.algod.getTransactionParams().do();\n      const groupTxns = [];\n      // pay seller, 25%\n      const txn0 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: buyer,\n        to: seller,\n        amount: price * 0.25,\n        suggestedParams,\n      });\n      // opt in buyer\n      const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: buyer,\n        to: buyer,\n        amount: 0,\n        assetIndex,\n        suggestedParams,\n      });\n      // transfer asset to buyer\n      const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: contractSig.address(),\n        to: buyer,\n        amount: 1,\n        assetIndex,\n        closeRemainderTo: buyer,\n        suggestedParams,\n      });\n      groupTxns.push(txn0, txn1, txn2);\n      // pay collaborators 1-7, 60%\n      this.collabAddresses().forEach((collabAddress) => {\n        const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: buyer,\n          to: collabAddress,\n          amount: (price * 0.6) / 7,\n          suggestedParams,\n        });\n        groupTxns.push(txn);\n      });\n      // pay collaborator 8, 15%\n      const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: buyer,\n        to: process.env.REACT_APP_COLLAB_1_ADDRESS ?? '',\n        amount: price * 0.15,\n        suggestedParams,\n      });\n      // close remainder to seller\n      const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: contractSig.address(),\n        to: seller,\n        amount: 0,\n        closeRemainderTo: seller,\n        suggestedParams,\n      });\n      groupTxns.push(txn3, txn4);\n\n      const group = algosdk.assignGroupID(groupTxns);\n      const signedTxns = await this.walletService.sign(group);\n\n      signedTxns[2] = algosdk.signLogicSigTransactionObject(\n        group[2],\n        contractSig\n      ).blob;\n      signedTxns[3] = algosdk.signLogicSigTransactionObject(\n        group[3],\n        contractSig\n      ).blob;\n      return await this.sendAndConfirm(signedTxns);\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Algodv2, Indexer } from 'algosdk';\nimport {\n  ALGOD_HOST_MAIN,\n  ALGOD_HOST_TEST,\n  INDEXER_HOST_MAIN,\n  INDEXER_HOST_TEST,\n  NodeEnv,\n} from '../utils';\n\nexport default class ChainService {\n  isMainNet: boolean = process.env.NODE_ENV === NodeEnv.Production;\n  algodHost: string = this.isMainNet ? ALGOD_HOST_MAIN : ALGOD_HOST_TEST;\n  algod: Algodv2 = new Algodv2('', this.algodHost, '');\n  indexerHost: string = this.isMainNet ? INDEXER_HOST_MAIN : INDEXER_HOST_TEST;\n  indexer: Indexer = new Indexer('', this.indexerHost, '');\n}\n","import { formatJsonRpcRequest } from '@json-rpc-tools/utils';\nimport WalletConnect from '@walletconnect/client';\nimport QRCodeModal from 'algorand-walletconnect-qrcode-modal';\nimport algosdk from 'algosdk';\nimport { BRIDGE } from '../utils';\n\nexport default class WalletService {\n  connector = new WalletConnect({\n    bridge: BRIDGE,\n    qrcodeModal: QRCodeModal,\n  });\n\n  sign = async (txns: any): Promise<Uint8Array[]> => {\n    const txnsToSign = txns.map((txn: any) => {\n      const encodedTxn = Buffer.from(\n        algosdk.encodeUnsignedTransaction(txn)\n      ).toString('base64');\n      let result: any = { txn: encodedTxn };\n      if (this.connector.accounts.includes(txn.from)) result.signers = [];\n      return result;\n    });\n    const request = formatJsonRpcRequest('algo_signTxn', [txnsToSign]);\n    const response = await this.connector.sendCustomRequest(request);\n    const signedTxns = response.map((element: string) =>\n      element ? new Uint8Array(Buffer.from(element, 'base64')) : null\n    );\n    return signedTxns;\n  };\n}\n"],"sourceRoot":""}